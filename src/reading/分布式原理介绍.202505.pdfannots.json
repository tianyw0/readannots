[
  {
    "type": "Highlight",
    "page": 4,
    "start_xy": [
      70.944,
      431.781
    ],
    "prior_outline": "前言",
    "text": "本文将讨论的重点集中 在分布式层面的协议和算法设计",
    "author": "田永威",
    "created": "2025-05-15T07:20:04",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 5,
    "start_xy": [
      70.944,
      673.371
    ],
    "prior_outline": "1.1  模型",
    "text": "首先给出在本文中研究的分布式系统在分布式层 面的基本问题模型",
    "author": "田永威",
    "created": "2025-05-15T07:34:52",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 5,
    "start_xy": [
      70.944,
      372.481
    ],
    "prior_outline": "1.1.1  节点",
    "text": "一个 节点往往是一个操作系统上的进程。",
    "author": "田永威",
    "created": "2025-05-15T07:34:59",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 5,
    "start_xy": [
      70.944,
      229.081
    ],
    "prior_outline": "1.1.2  通信",
    "text": "节点与节点之间是完全独立、相互隔离的，节点之间传递信息的唯一方式是通过不可靠的网络 进行通信。",
    "author": "田永威",
    "created": "2025-05-15T07:35:32",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 6,
    "start_xy": [
      134.7786,
      765.409
    ],
    "prior_outline": "1.1.3  存储",
    "text": "存储、读取数据的节点称为有状态的节点，反之称为无状态的节点",
    "author": "田永威",
    "created": "2025-05-15T07:46:03",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 6,
    "start_xy": [
      91.944,
      642.269
    ],
    "prior_outline": "1.1.4  异常",
    "text": "分布式系统核心问题之一就是处理各种异常(failure)情况",
    "author": "田永威",
    "created": "2025-05-15T07:49:38",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 7,
    "start_xy": [
      91.944,
      560.781
    ],
    "prior_outline": "1.1.4.2.2  消息乱序",
    "text": "消息乱序是指节点发送的网络消息有一定的概率不是按照发送时的顺序依次到达目的节点",
    "author": "田永威",
    "created": "2025-05-15T07:51:36",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 7,
    "start_xy": [
      70.944,
      540.839
    ],
    "prior_outline": "1.1.4.2.2  消息乱序",
    "text": "这 就要求设计分布式协议时，考虑使用序列号等机制处理网络消息的乱序问题，使得无效的、过期的 网络消息不影响系统的正确性。",
    "author": "田永威",
    "created": "2025-05-15T07:51:56",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 7,
    "start_xy": [
      70.944,
      445.461
    ],
    "prior_outline": "1.1.4.2.3  数据错误",
    "text": "网络上传输的数据有可能发生比特错误，从而造成数据错误。通常使用一定的校验码机制可以 较为简单的检查出网络数据的错误，从而丢弃错误的数据。",
    "author": "田永威",
    "created": "2025-05-15T07:53:10",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 7,
    "start_xy": [
      70.944,
      371.019
    ],
    "prior_outline": "1.1.4.2.4  不可靠的TCP",
    "text": "TCP 协议为应用层提供了可靠的、面向连接的传输服务。TCP 协议是最优秀的传输层协议之一， 其设计初衷就是在不可靠的网络之上建立可靠的传输服务。TCP 协议通过为传输的每一个字节设置 顺序递增的序列号，由接收方在收到数据后按序列号重组数据并发送确认信息，当发现数据包丢失 时，TCP 协议重传丢失的数据包，从而 TCP 协议解决了网络数据包丢失的问题和数据包乱序问题。 TCP 协议为每个 TCP 数据段（以太网上通常最大为 1460 字节）使用 32 位的校验和从而检查数据错 误问题。TCP 协议通过设置接收和发送窗口的机制极大的提高了传输性能，解决了网络传输的时延 与吞吐问题。TCP 协议最为复杂而巧妙的是其几十年来不断改进的拥塞控制算法，使得 TCP 可以动 态感知底层链路的带宽加以合理使用并与其他 TCP 链接分享带宽（TCP friendly）。",
    "author": "田永威",
    "created": "2025-05-15T08:07:14",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 8,
    "start_xy": [
      70.944,
      595.349
    ],
    "prior_outline": "1.1.4.2.4  不可靠的TCP",
    "text": "在设计分布系统的网络协议时即使使用 TCP 协议，也依旧要考虑网络异常，不能 简单的认为使用 TCP 协议后通信就是可靠的。另一方面，如果完全放弃使用 TCP 协议，使用 UDP 协议加自定义的传输控制机制，则会使得系统设计复杂。尤其是要设计、实现一个像 TCP 那样优秀 的拥塞控制机制是非常困难的。",
    "author": "田永威",
    "created": "2025-05-15T08:00:35",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 8,
    "start_xy": [
      70.944,
      391.059
    ],
    "prior_outline": "1.1.4.3  分布式系统的三态",
    "text": "RPC 执行的结果有三种状态：\"成功\"、\"失败\"、\"超时（未 知）\"，称之为分布式系统的三态。",
    "author": "田永威",
    "created": "2025-05-15T08:02:07",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      728.185
    ],
    "prior_outline": "1.2.1  副本的概念",
    "text": "副本的概念 副本（replica/copy）指在分布式系统中为数据或服务提供的冗余。对于数据副本指在不同的节 点上持久化同一份数据，当出现某一个节点的存储的数据丢失时，可以从副本上读到数据。数据副 本是分布式系统解决数据丢失异常的唯一手段。另一类副本是服务副本，指数个节点提供某种相同 的服务，这种服务一般并不依赖于节点的本地存储，其所需数据一般来自其他节点。",
    "author": "田永威",
    "created": "2025-05-15T08:09:56",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      608.069
    ],
    "prior_outline": "1.2.1  副本的概念",
    "text": "GFS 系统的同一个 chunk 的数个副本就是典型的数据副本，而 Map  Reduce 系统的 Job Worker 则是典型的服务副本",
    "author": "田永威",
    "created": "2025-05-15T08:10:30",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      559.341
    ],
    "prior_outline": "1.2.1  副本的概念",
    "text": "副本协议是贯穿整个分布式系统的理论核心，在后续章节中，本文将讨论在工程中广泛使用的 各种副本协议",
    "author": "田永威",
    "created": "2025-05-15T08:10:32",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      476.781
    ],
    "prior_outline": "1.2.2  副本一致性",
    "text": "分布式系统通过副本控制协议，使得从系统外部读取系统内部各个副本的数据在一定的约束条 件下相同，称之为副本一致性(consistency)。",
    "author": "田永威",
    "created": "2025-05-15T08:10:56",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      91.944,
      339.481
    ],
    "prior_outline": "1.2.2  副本一致性",
    "text": "依据一致性的强弱即约束条件的不同苛刻程度，副本一致性分为若干变种或者级别",
    "author": "田永威",
    "created": "2025-05-15T08:13:03",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      291.459
    ],
    "prior_outline": "1.2.2  副本一致性",
    "text": "强一致性(strong consistency)：任何时刻任何用户或节点都可以读到最近一次成功更新的副本数 据。强一致性是程度最高的一致性要求，也是实践中最难以实现的一致性",
    "author": "田永威",
    "created": "2025-05-15T08:13:11",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      243.099
    ],
    "prior_outline": "1.2.2  副本一致性",
    "text": "单调一致性(monotonic consistency)：任何时刻，任何用户一旦读到某个数据在某次更新后的值， 这个用户不会再读到比这个值更旧的值。单调一致性是弱于强一致性却非常实用的一种一致性级别。 因为通常来说，用户只关心从己方视角观察到的一致性，而不会关注其他用户的一致性情况",
    "author": "田永威",
    "created": "2025-05-15T08:13:18",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 11,
    "start_xy": [
      70.944,
      174.429
    ],
    "prior_outline": "1.2.2  副本一致性",
    "text": "会话一致性(session consistency)：任何用户在某一次会话内一旦读到某个数据在某次更新后的值， 这个用户在这次会话过程中不会再读到比这个值更旧的值。",
    "author": "田永威",
    "created": "2025-05-15T08:14:41",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 12,
    "start_xy": [
      70.944,
      737.309
    ],
    "prior_outline": "1.2.2  副本一致性",
    "text": "最终一致性(eventual consistency)：最终一致性要求一旦更新成功，各个副本上的数据最终将达 到完全一致的状态，但达到完全一致状态所需要的时间不能保障。对于最终一致性系统而言，一个 用户只要始终读取某一个副本的数据，则可以实现类似单调一致性的效果，但一旦用户更换读取的 副本，则无法保障任何一致性。 弱一致性(week  consistency)：一旦某个更新成功，用户无法在一个确定时间内读到这次更新的 值，且即使在某个副本上读到了新的值，也不能保证在其他副本上可以读到新的值。弱一致性系统 一般很难在实际中使用，使用弱一致性系统需要应用方做更多的工作从而使得系统可用",
    "author": "田永威",
    "created": "2025-05-15T08:17:02",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 12,
    "start_xy": [
      70.944,
      545.181
    ],
    "prior_outline": "1.3  衡量分布式系统的指标",
    "text": "评价分布式系统有一些常用的指标。依据设计需求的不同，分布式系统对于这些指标也有不同 的要求。",
    "author": "田永威",
    "created": "2025-05-15T08:18:05",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 12,
    "start_xy": [
      70.944,
      442.341
    ],
    "prior_outline": "1.3.1  性能",
    "text": "常见的性能指标有：系统的吞吐能力，指系统在某 一时间可以处理的数据总量，通常可以用系统每秒处理的总的数据量来衡量；系统的响应延迟，指 系统完成某一功能需要使用的时间；系统的并发能力，指系统可以同时完成某一功能的能力，通常 也用 QPS(query  per  second)来衡量。上述三个性能指标往往会相互制约，追求高吞吐的系统，往往 很难做到低延迟；系统平均响应时间较长时，也很难提高 QPS。",
    "author": "田永威",
    "created": "2025-05-15T08:18:33",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 12,
    "start_xy": [
      91.944,
      299.259
    ],
    "prior_outline": "1.3.2  可用性",
    "text": "系统的可用性(availability)指系统在面对各种异常时可以正确提供服务的能力。",
    "author": "田永威",
    "created": "2025-05-15T08:19:40",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 12,
    "start_xy": [
      70.944,
      196.389
    ],
    "prior_outline": "1.3.3  可扩展性",
    "text": "系统的可扩展性(scalability)指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、 并发）、存储容量、计算能力的特性。可扩展性是分布式系统的特有性质。分布式系统的设计初衷就 是利用集群多机的能力处理单机无法解决的问题。",
    "author": "田永威",
    "created": "2025-05-15T08:20:08",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 12,
    "start_xy": [
      70.944,
      135.211
    ],
    "prior_outline": "1.3.3  可扩展性",
    "text": "当任务的需求随着具体业务不断提高时，除了升级系统 的性能，另一个做法就是通过增加机器的方式扩展系统的规模。好的分布式系统总在追求\"线性扩 展性\"，也就是使得系统的某一指标可以随着集群中的机器数量线性增长。",
    "author": "田永威",
    "created": "2025-05-15T09:06:03",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 13,
    "start_xy": [
      70.944,
      730.851
    ],
    "prior_outline": "1.3.4  一致性",
    "text": "分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。 根据具体的业务需求的不同，分布式系统总是提供某种一致性模型，并基于此模型提供具体的服务。",
    "author": "田永威",
    "created": "2025-05-15T09:07:33",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 14,
    "start_xy": [
      70.944,
      612.531
    ],
    "prior_outline": "2.1  数据分布方式",
    "text": "如何拆解分布式系统的输入数据成为分布式系统的基本问题，本文称这样的数据拆解为 数据分布方式，在本节中介绍几种常见的数据分布方式",
    "author": "田永威",
    "created": "2025-05-15T09:10:09",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 14,
    "start_xy": [
      70.944,
      529.941
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "哈希方式是最常见的数据分布方式，其方法是按照数据的某一特征计算哈希值，并将哈希值与 机器中的机器建立映射关系，从而将不同哈希值的数据分布到不同的机器上。所谓数据特征可以是 key-value 系统中的 key，也可以是其他与应用业务逻辑相关的值。",
    "author": "田永威",
    "created": "2025-05-15T09:11:17",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 15,
    "start_xy": [
      70.944,
      736.971
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "哈希分布数据的缺点同样明显，突出表现为可扩展性不高，一旦集群规模需要扩展，则几乎所 有的数据需要被迁移并重新分布",
    "author": "田永威",
    "created": "2025-05-15T09:38:36",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 15,
    "start_xy": [
      70.944,
      716.691
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "工程中，扩展哈希分布数据的系统时，往往使得集群规模成倍扩 展，按照数据重新计算哈希，这样原本一台机器上的数据只需迁移一半到另一台对应的机器上即可 完成扩展",
    "author": "田永威",
    "created": "2025-05-15T09:38:40",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 15,
    "start_xy": [
      70.944,
      648.051
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "哈希方式扩展性差的问题，一种思路是不再简单的将哈希值与机器做除法取模映射，而是 将对应关系作为元数据由专门的元数据服务器管理。访问数据时，首先计算哈希值并查询元数据服 务器，获得该哈希值对应的机器。同时，哈希值取模个数往往大于机器个数，这样同一台机器上需 要负责多个哈希取模的余数。在集群扩容时，将部分余数分配到新加入的机器并迁移对应的数据到 新机器上，从而使得扩容不再依赖于机器数量的成本增长",
    "author": "田永威",
    "created": "2025-05-15T09:39:38",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 15,
    "start_xy": [
      70.944,
      567.239
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "这种做法和 2.1.2  中按数据范围分布数 据、2.1.3  按数据量分布数据的有一个共同点，都需要以较复杂的机制维护大量的元数据",
    "author": "田永威",
    "created": "2025-05-15T09:42:16",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 15,
    "start_xy": [
      70.944,
      518.879
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "哈希分布数据的另一个缺点是，一旦某数据特征值的数据严重不均，容易出现\"数据倾斜\"（data skew）问题",
    "author": "田永威",
    "created": "2025-05-15T09:41:57",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 15,
    "start_xy": [
      70.944,
      163.149
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "在这种情况下只能重新选择需要哈希的数据特征，例如选择用户 id 与另一个数据维度的组合作 为哈希函数的输入，如这样做，则需要完全重新分布数据，在工程实践中可操作性不高。另一种极 端的思路是，使用数据的全部而不是某些维度的特征计算哈希，这样数据将被完全打散在集群中。 然而实践中有时并不这样做，这是因为这样做使得每个数据之间的关联性完全消失，",
    "author": "田永威",
    "created": "2025-05-15T09:43:02",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 16,
    "start_xy": [
      70.944,
      744.771
    ],
    "prior_outline": "2.1.1  哈希方式",
    "text": "如果系统处理的每条数据之间没有任何逻辑上的联系，例如一个给定关 键词的查询系统，每个关键词之间并没有逻辑上的联系，则可以使用全部数据做哈希的方式解决数 据倾斜问题。",
    "author": "田永威",
    "created": "2025-05-15T09:43:50",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 16,
    "start_xy": [
      70.944,
      641.931
    ],
    "prior_outline": "2.1.2  按数据范围分布",
    "text": "按数据范围分布是另一个常见的数据分布式，将数据按特征值的值域范围划分为不同的区间， 使得集群中每台（组）服务器处理不同区间的数据",
    "author": "田永威",
    "created": "2025-05-15T09:44:00",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 16,
    "start_xy": [
      70.944,
      148.891
    ],
    "prior_outline": "2.1.2  按数据范围分布",
    "text": "与哈希分布数据的方式只需要记录哈希函数及分桶个数（机器数）不同，按数据范围分布数据 需要记录所有的数据分布情况。一般的，往往需要使用专门的服务器在内存中维护数据分布信息， 称这种数据的分布信息为一种元信息。甚至对于大规模的集群，由于元信息的规模非常庞大，单台 计算机无法独立维护，需要使用多台机器作为元信息服务器",
    "author": "田永威",
    "created": "2025-05-15T09:45:27",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 17,
    "start_xy": [
      70.944,
      587.211
    ],
    "prior_outline": "2.1.2  按数据范围分布",
    "text": "哈希分布数据的方式使得系统中的数据类似一个哈希表。按范围分数据的方式则使得从全局看 数据类似一个 B 树",
    "author": "田永威",
    "created": "2025-05-15T09:50:21",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 17,
    "start_xy": [
      70.944,
      367.321
    ],
    "prior_outline": "2.1.3  按数据量分布",
    "text": "数 据量分布数据与具体的数据特征无关，而是将数据视为一个顺序增长的文件，并将这个文件按照某 一较为固定的大小划分为若干数据块（chunk），不同的数据块分布到不同的服务器上。与按数据范 围分布数据的方式类似的是，按数据量分布数据也需要记录数据块的具体分布情况，并将该分布信 息作为元数据使用元数据服务器管理。",
    "author": "田永威",
    "created": "2025-05-15T09:52:06",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 17,
    "start_xy": [
      70.944,
      217.561
    ],
    "prior_outline": "2.1.3  按数据量分布",
    "text": "按数据量划分数据 的缺点是需要管理较为复杂的元信息，与按范围分布数据的方式类似，当集群规模较大时，元信息 的数据量也变得很大，高效的管理元信息成为新的课题。",
    "author": "田永威",
    "created": "2025-05-15T09:52:18",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 17,
    "start_xy": [
      91.944,
      115.029
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "一致性哈希（consistent hashing）是另一个种在工程中使用较为广泛的数据分布方式",
    "author": "田永威",
    "created": "2025-05-15T09:53:57",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 18,
    "start_xy": [
      70.944,
      765.071
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "用一个哈希函数计算数据或数据特征的哈希值，令该哈希函数的输出值域为一个封闭的环，即哈希 函数输出的最大值是最小值的前序。将节点随机分布到这个环上，每个节点负责处理从自己开始顺 时针至下一个节点的全部哈希值域上的数据。",
    "author": "田永威",
    "created": "2025-05-15T09:53:07",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 18,
    "start_xy": [
      70.944,
      211.171
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "最基本的一致性哈希算法有很明显的缺点，随机分布节点的方式使得很难均匀的分布哈希 值域，尤其在动态增加节点后，即使原先的分布均匀也很难保证继续均匀，由此带来的另一个较为 严重的缺点是，当一个节点异常时，该节点的压力全部转移到相邻的一个节点，当加入一个新节点 时只能为一个相邻节点分摊压力",
    "author": "田永威",
    "created": "2025-05-15T09:59:06",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 18,
    "start_xy": [
      70.944,
      122.589
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "一种常见的改进算法是引入虚节点（virtual node）的概念，系统初始时就创建许多虚节点， 虚节点的个数一般远大于未来集群中机器的个数，将虚节点均匀分布到一致性哈希值域环上",
    "author": "田永威",
    "created": "2025-05-15T09:59:30",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 18,
    "start_xy": [
      70.944,
      396.861
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "一致性哈希 的优点在于可以任意动态添加、删除节点，每次添加、删除一个节点仅影响一致性哈希环上相邻的 节点",
    "author": "田永威",
    "created": "2025-05-15T09:58:11",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 19,
    "start_xy": [
      70.944,
      765.071
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "为每个节点分配若干虚节点。操作数据时，首先通过数据 的哈希值在环上找到对应的虚节点，进而查找元数据找到对应的真实节点",
    "author": "田永威",
    "created": "2025-05-15T10:00:48",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 19,
    "start_xy": [
      70.944,
      744.771
    ],
    "prior_outline": "2.1.4  一致性哈希",
    "text": "使用虚节点改进有多个 优点。首先，一旦某个节点不可用，该节点将使得多个虚节点不可用，从而使得多个相邻的真实节 点负载失效节点的压里。同理，一旦加入一个新节点，可以分配多个虚节点，从而使得新节点可以 负载多个原有节点的压力",
    "author": "田永威",
    "created": "2025-05-15T10:01:24",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 19,
    "start_xy": [
      70.944,
      621.651
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "上述几节讨论了几种常见的数据分布方式，这些讨论中没有考虑数据副本的问题。分布式系统 容错、提高可用性的基本手段就是使用副本。对于数据副本的分布方式主要影响系统的可扩展性",
    "author": "田永威",
    "created": "2025-05-15T10:06:44",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 19,
    "start_xy": [
      70.944,
      573.261
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "一种基本的数据副本策略是以机器为单位，若干机器互为副本，副本机器之间的数据完全相同。 这种策略适用于上述各种数据分布方式。其优点是非常简单，其缺点是恢复数据的效率不高、可扩 展性也不高。",
    "author": "田永威",
    "created": "2025-05-15T10:06:56",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 20,
    "start_xy": [
      70.944,
      648.051
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "更合适的做法不是以机器作为副本单位，而是将数据拆为较合理的数据段，以数据段为单位作 为副本。实践中，常常使得每个数据段的大小尽量相等且控制在一定的大小以内。数据段有很多不 同的称谓，segment，fragment，chunk，partition 等等。数据段的选择与数据分布方式直接相关",
    "author": "田永威",
    "created": "2025-05-15T10:07:58",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 20,
    "start_xy": [
      70.944,
      437.421
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "一旦将数据分为数据段，则可以以数据段为单位管理副本，从而副本与机器不再硬相关，每台 机器都可以负责一定数据段的副本",
    "author": "田永威",
    "created": "2025-05-15T10:24:28",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 20,
    "start_xy": [
      70.944,
      125.371
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "一旦副本分布与机器无关，数据丢失后的恢复效率将非常高。这是因为，一旦某台机器的数据 丢失，其上数据段的副本将分布在整个集群的所有机器中，而不是仅在几个副本机器中，从而可以 从整个集群同时拷贝恢复数据，而集群中每台数据源机器都可以以非常低的资源做拷贝",
    "author": "田永威",
    "created": "2025-05-15T10:24:57",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 21,
    "start_xy": [
      70.944,
      744.771
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "副本分布与机器无关也利于集群容错。如果出现机器宕机，由于宕机机器上的副本分散于整个集群， 其压力也自然分散到整个集群。最后，副本分布与机器无关也利于集群扩展。理论上，设集群规模 为 N 台机器，当加入一台新的机器时，只需从各台机器上迁移 1/N  –  1/N+1 比例的数据段到新机器 即实现了新的负载均衡。由于是从集群中各机器迁移数据，与数据恢复同理，效率也较高",
    "author": "田永威",
    "created": "2025-05-15T10:25:30",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 21,
    "start_xy": [
      70.944,
      655.851
    ],
    "prior_outline": "2.1.5  副本与数据分布",
    "text": "完全按照数据段建立副本会引起需要管理的元数据的开销增大，副本维护的难度也相 应增大。一种折中的做法是将某些数据段组成一个数据段分组，按数据段分组为粒度进行副本管理。 这样做可以将副本粒度控制在一个较为合适的范围内",
    "author": "田永威",
    "created": "2025-05-15T10:26:04",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 22,
    "start_xy": [
      70.944,
      765.071
    ],
    "prior_outline": "2.1.8  工程投影",
    "text": "几乎所有的分布式系统都会涉及到数据分布问题。这里列举了几个常见的分布式系统的数据分 布方式如下。 GFS[9] & HDFS 按数据量分布 Map reduce[10] 按 GFS 的数据分布做本地化 Big Table[11] & HBase 按数据范围分布 PNUTS[14] 哈希方式/按数据范围分布（可选） Dynamo[16] & Cassandra[17]一致性哈希 Mola & Armor *[18] 哈希方式 Big Pipe *[18] 哈希方式 Doris *[18] 哈希方式与按数据量分布组合",
    "author": "田永威",
    "created": "2025-05-15T10:28:25",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      91.944,
      730.851
    ],
    "prior_outline": "2.2  基本副本协议",
    "text": "本节讨论基本的副本控制协议，着重分析两大类典型的副本控制协议",
    "author": "田永威",
    "created": "2025-05-15T10:29:52",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      702.771
    ],
    "prior_outline": "2.2  基本副本协议",
    "text": "副本控制协议指按特定的协议流程控制副本数据的读写行为，使得副本满足一定的可用性和一 致性要求的分布式协议",
    "author": "田永威",
    "created": "2025-05-15T10:30:14",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      682.491
    ],
    "prior_outline": "2.2  基本副本协议",
    "text": "副本控制协议要具有一定的对抗异常状态的容错能力，从而使得系统具有 一定的可用性，同时副本控制协议要能提供一定一致性级别",
    "author": "田永威",
    "created": "2025-05-15T10:30:46",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      593.909
    ],
    "prior_outline": "2.2  基本副本协议",
    "text": "本文将副本控制协议分为两大类：\"中心化(centralized)副本控制协议\"和\"去中心化(decentralized) 副本控制协议\"。",
    "author": "田永威",
    "created": "2025-05-15T10:30:55",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      510.981
    ],
    "prior_outline": "2.2.1  中心化副本控制协议",
    "text": "中心化副本控制协议的基本思路是由一个中心节点协调副本数据的更新、维护副本之间的一致 性",
    "author": "田永威",
    "created": "2025-05-15T10:31:10",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      491.039
    ],
    "prior_outline": "2.2.1  中心化副本控制协议",
    "text": "中心化副本控制协议的优点是协议相对较为简单， 所有的副本相关的控制交由中心节点完成",
    "author": "田永威",
    "created": "2025-05-15T10:32:36",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      470.421
    ],
    "prior_outline": "2.2.1  中心化副本控制协议",
    "text": "并发控制将由中心节点完成，从而使得一个分布式并发 控制问题，简化为一个单机并发控制问题",
    "author": "田永威",
    "created": "2025-05-15T10:32:44",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      450.141
    ],
    "prior_outline": "2.2.1  中心化副本控制协议",
    "text": "所谓并发控制，即多个节点同时需要修改副本数据时， 需要解决\"写写\"、\"读写\"等并发冲突。单机系统上常用加锁等方式进行并发控制",
    "author": "田永威",
    "created": "2025-05-15T10:33:05",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 23,
    "start_xy": [
      70.944,
      151.149
    ],
    "prior_outline": "2.2.2  primary-secondary协议",
    "text": "本文着重介绍一种非常常用的 primary-secondary（也称 primary-backup）的中心化副本控制协议。 在 primary-secondary 类型的协议中，副本被分为两大类，其中有且仅有一个副本作为 primary 副本， 除 primary 以外的副本都作为 secondary 副本。维护 primary 副本的节点作为中心节点，中心节点负 责维护数据的更新、并发控制、协调副本的一致性",
    "author": "田永威",
    "created": "2025-05-15T10:36:26",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 24,
    "start_xy": [
      70.944,
      765.409
    ],
    "prior_outline": "2.2.2  primary-secondary协议",
    "text": "Primary-secondary 类型的协议一般要解决四大类问题：数据更新流程、数据读取方式、Primary 副本的确定和切换、数据同步（reconcile）",
    "author": "田永威",
    "created": "2025-05-15T10:37:01",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 25,
    "start_xy": [
      91.944,
      724.829
    ],
    "prior_outline": "2.2.2.2  数据读取方式",
    "text": "使用 primary-secondary 比较困难的是实现强一致性。 这里简单讨论 primary-secondary 实现强一致性的几种思路",
    "author": "田永威",
    "created": "2025-05-15T10:40:02",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 25,
    "start_xy": [
      70.944,
      668.669
    ],
    "prior_outline": "2.2.2.2  数据读取方式",
    "text": "第一、由于数据的更新流程都是由 primary 控制的，primary 副本上的数据一定是最新的，所以 如果始终只读 primary 副本的数据，可以实现强一致性",
    "author": "田永威",
    "created": "2025-05-15T10:41:36",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 25,
    "start_xy": [
      70.944,
      587.549
    ],
    "prior_outline": "2.2.2.2  数据读取方式",
    "text": "每台机器 上都有一些数据的 primary 副本，也有另一些数据段的 secondary 副本。从而某台服务器实际都提供 读写服务",
    "author": "田永威",
    "created": "2025-05-15T10:42:00",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 25,
    "start_xy": [
      91.944,
      409.679
    ],
    "prior_outline": "2.2.2.2  数据读取方式",
    "text": "第二、由 primary 控制节点 secondary 节点的可用性",
    "author": "田永威",
    "created": "2025-05-15T10:42:06",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 25,
    "start_xy": [
      70.944,
      307.921
    ],
    "prior_outline": "2.2.2.2  数据读取方式",
    "text": "这种方式依赖于一个中心元数据管理系统，用于记录哪些副本可用， 哪些副本不可用。某种意义上，该方式通过降低系统的可用性来提高系统的一致性",
    "author": "田永威",
    "created": "2025-05-15T10:42:40",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 25,
    "start_xy": [
      70.944,
      197.589
    ],
    "prior_outline": "2.2.2.3  primary副本的确定与切换",
    "text": "在 primary-secondary 类型的协议中，另一个核心的问题是如何确定 primary 副本，尤其是在原 primary 副本所在机器出现宕机等异常时，需要有某种机制切换 primary 副本，使得某个 secondary 副本成为新的 primary 副本。 通常的，在 primary-secondary 类型的分布式系统中，哪个副本是 primary 这一信息都属于元信 息，由专门的元数据服务器维护。执行更新操作时，首先查询元数据服务器获取副本的 primary 信 息，从而进一步执行数据更新流程",
    "author": "田永威",
    "created": "2025-05-15T10:43:42",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      70.944,
      765.409
    ],
    "prior_outline": "2.2.2.3  primary副本的确定与切换",
    "text": "切换副本的难点在于两个方面，首先，如何确定节点的状态以发现原 primary 节点异常是一个 较为复杂的问题。在 2.3  中，详细介绍一种基于 Lease 机制确定节点状态的方法",
    "author": "田永威",
    "created": "2025-05-15T13:53:45",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      70.944,
      684.269
    ],
    "prior_outline": "2.2.2.3  primary副本的确定与切换",
    "text": "然而在原 primary 已经发送宕机等异常时，如何确定一个 secondary 副本使得该副本上的数据与原 primary 一致又成为新的问题",
    "author": "田永威",
    "created": "2025-05-15T10:46:10",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      91.944,
      615.629
    ],
    "prior_outline": "2.2.2.3  primary副本的确定与切换",
    "text": "由于分布式系统中可靠的发现节点异常是需要一定的探测时间的",
    "author": "田永威",
    "created": "2025-05-15T10:55:38",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      70.944,
      534.479
    ],
    "prior_outline": "2.2.2.3  primary副本的确定与切换",
    "text": "primary-backup 类副本协议的最大缺点就是由于 primary 切换带来的一定的停服务时间",
    "author": "田永威",
    "created": "2025-05-15T10:55:40",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      70.944,
      472.199
    ],
    "prior_outline": "2.2.2.4  数据同步",
    "text": "Primary-secondary 型协议一般都会遇到 secondary 副本与 primary 不一致的问题。此时，不一致 的 secondary 副本需要与 primary 进行同步（reconcile）",
    "author": "田永威",
    "created": "2025-05-15T13:41:55",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      70.944,
      423.839
    ],
    "prior_outline": "2.2.2.4  数据同步",
    "text": "通常不一致的形式有三种：一、由于网络分化等异常，secondary 上的数据落后于 primary 上的 数据。二、在某些协议下，secondary 上的数据有可能是脏数据，需要被丢弃。所谓脏数据是由于 primary 副本没有进行某一更新操作，而 secondary 副本上反而进行的多余的修改操作，从而造成 secondary 副本数据错误。三、secondary",
    "author": "田永威",
    "created": "2025-05-15T13:53:57",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 26,
    "start_xy": [
      91.944,
      89.73504
    ],
    "prior_outline": "2.2.3  去中心化副本控制协议",
    "text": "去中心化副本控制是另一类较为复杂的副本控制协议",
    "author": "田永威",
    "created": "2025-05-15T13:43:54",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 27,
    "start_xy": [
      70.944,
      765.071
    ],
    "prior_outline": "2.2.3  去中心化副本控制协议",
    "text": "去中心化副本控制协议没有中心节点，协议中所有的节点都是完全对等的，节点之间通过平等协商 达到一致。从而去中心化协议没有因为中心化节点异常而带来的停服务等问题",
    "author": "田永威",
    "created": "2025-05-15T13:44:17",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 27,
    "start_xy": [
      70.944,
      696.411
    ],
    "prior_outline": "2.2.3  去中心化副本控制协议",
    "text": "然而，没有什么事情是完美的，去中心化协议的最大的缺点是协议过程通常比较复杂。尤其当 去中心化协议需要实现强一致性时，协议流程变得复杂且不容易理解。由于流程的复杂，去中心化 协议的效率或者性能一般也较中心化协议低",
    "author": "田永威",
    "created": "2025-05-15T13:45:03",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 27,
    "start_xy": [
      91.944,
      418.701
    ],
    "prior_outline": "2.2.3  去中心化副本控制协议",
    "text": "与中心化副本控制协议具有某些共性不同，各类去中心化副本控制协议则各有各的巧妙",
    "author": "田永威",
    "created": "2025-05-15T13:45:43",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 27,
    "start_xy": [
      70.944,
      398.759
    ],
    "prior_outline": "2.2.3  去中心化副本控制协议",
    "text": "Paxos 是唯一在工程中得到应用的强一致性去中 心化副本控制协议",
    "author": "田永威",
    "created": "2025-05-15T13:45:48",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 27,
    "start_xy": [
      70.944,
      315.841
    ],
    "prior_outline": "2.2.4  工程投影",
    "text": "工程中大量的副本控制协议 都是 primary-secondary 型协议。从下面这些具体的分布式系统中不难看出，Primary-secondary 型副 本控制虽然简单，但使用却极其广泛",
    "author": "田永威",
    "created": "2025-05-15T13:46:04",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 29,
    "start_xy": [
      91.944,
      731.189
    ],
    "prior_outline": "2.3  Lease机制",
    "text": "Lease 机制是最重要的分布式协议，广泛应用于各种实际的分布式系统中",
    "author": "田永威",
    "created": "2025-05-15T13:55:26",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 29,
    "start_xy": [
      70.944,
      690.629
    ],
    "prior_outline": "2.3  Lease机制",
    "text": "lease 机 制最重要的应用：判定节点状态",
    "author": "田永威",
    "created": "2025-05-15T13:55:32",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 31,
    "start_xy": [
      70.944,
      614.189
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "Lease 是由颁发者授予的在某一有效期内的承诺。颁发者一旦发 出 lease，则无论接受方是否收到，也无论后续接收方处于何种状态，只要 lease 不过期，颁发者一 定严守承诺；另一方面，接收方在 lease 的有效期内可以使用颁发者的承诺，但一旦 lease 过期，接 收方一定不能继续使用颁发者的承诺",
    "author": "田永威",
    "created": "2025-05-15T13:58:37",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 31,
    "start_xy": [
      70.944,
      416.039
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "首先，通过引入有效期，Lease 机制能否非常好的容错网络异 常。Lease 颁发过程只依赖于网络可以单向通信，即使接收方无法向颁发者发送消息，也不影响 lease 的颁发。由于 lease 的有效期是一个确定的时间点，lease 的语义与发送 lease 的具体时间无关，所以 同一个 lease 可以被颁发者不断重复向接受方发送。即使颁发者偶尔发送 lease 失败，颁发者也可以 简单的通过重发的办法解决。一旦 lease 被接收方成功接受，后续 lease 机制不再依赖于网络通信， 即使网络完全中断 lease 机制也不受影响",
    "author": "田永威",
    "created": "2025-05-15T14:00:51",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 31,
    "start_xy": [
      91.944,
      416.039
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "Lease 机制具有很高的容错能力",
    "author": "田永威",
    "created": "2025-05-15T14:00:01",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 31,
    "start_xy": [
      265.1439,
      314.619
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "再者，Lease 机制能较好的容错节点宕机",
    "author": "田永威",
    "created": "2025-05-15T14:01:52",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 31,
    "start_xy": [
      155.0755,
      172.629
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "最后，lease 机制不依赖于存储",
    "author": "田永威",
    "created": "2025-05-15T14:02:17",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      91.944,
      765.409
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "Lease 机制依赖于有效期，这就要求颁发者和接收者的时钟是同步的",
    "author": "田永威",
    "created": "2025-05-15T14:02:57",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      70.944,
      683.931
    ],
    "prior_outline": "2.3.2  lease机制的分析",
    "text": "对于这种时钟不同步，实践中的通常做法是 将颁发者的有效期设置得比接收者的略大，只需大过时钟误差就可以避免对 lease 的有效性的影响",
    "author": "田永威",
    "created": "2025-05-15T14:03:08",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      70.944,
      601.371
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "在分布式系统中确定一个节点是否处于正常工作状态是一个困难的问题。由于可能存在网络分 化，节点的状态是无法通过网络通信来确定的。下面举一个较为具体的例子来讨论这个问题",
    "author": "田永威",
    "created": "2025-05-15T14:03:38",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      70.944,
      553.319
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "例 2.3.1：在一个 primary-secondary 架构的系统中，有三个节点 A、B、C 互为副本，其中有一 个节点为 primary，且同一时刻只能有一个 primary 节点。另有一个节点 Q 负责判断节点 A、B、C 的状态，一旦 Q 发现 primary 异常，节点 Q 将选择另一个节点作为 primary。假设最开始时节点 A 为 primary，B、C 为 secondary。节点 Q 需要判断节点 A、B、C 的状态是否正常",
    "author": "田永威",
    "created": "2025-05-15T14:04:32",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      91.944,
      464.399
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "首先需要说明的是基于\"心跳\"(Heartbeat)的方法无法很好的解决这个问题",
    "author": "田永威",
    "created": "2025-05-15T14:05:52",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      70.944,
      302.139
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "由于节点 Q 的通知消息到达节点 A、B、C 的顺序无法确定，假如先到达 B， 则在这一时刻，系统中同时存在两个工作中的 primary，一个是 A、另一个是 B。假如此时 A、B 都 接收外部请求并与 C 同步数据，会产生严重的数据错误。上述即所谓\"双主\"问题，虽然看似这种 问题出现的概率非常低，但在工程实践中，笔者不止一次见到过这样的情况发生",
    "author": "田永威",
    "created": "2025-05-15T14:06:19",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      70.944,
      213.219
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "上述问题的出现的原因在于虽然节点 Q 认为节点 A 异常，但节点 A 自己不认为自己异常，依 旧作为 primary 工作。其问题的本质是由于网络分化造成的系统对于\"节点状态\"认知的不一致",
    "author": "田永威",
    "created": "2025-05-15T14:07:14",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 32,
    "start_xy": [
      70.944,
      164.829
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "上面的例子中的分布式协议依赖于对节点状态认知的全局一致性，即一旦节点 Q 认为某个节点 A 异常，则节点 A 也必须认为自己异常，从而节点 A 停止作为 primary，避免\"双主\"问题的出现。 解决这种问题有两种思路，第一、设计的分布式协议可以容忍\"双主\"错误，即不依赖于对节点状 态的全局一致性认识，或者全局一致性状态是全体协商后的结果；第二、利用 lease 机制",
    "author": "田永威",
    "created": "2025-05-15T14:11:35",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 33,
    "start_xy": [
      70.944,
      717.029
    ],
    "prior_outline": "2.3.3  基于lease机制确定节点状态",
    "text": "由中心节点向其他节点发送 lease，若某个节点持有有效的 lease，则认为该节点正常可以提供服 务。用于例 2.3.1 中，节点 A、B、C 依然周期性的发送 heart beat 报告自身状态，节点 Q 收到 heart beat 后发送一个 lease，表示节点 Q 确认了节点 A、B、C 的状态，并允许节点在 lease 有效期内正常工 作。节点 Q 可以给 primary 节点一个特殊的 lease，表示节点可以作为 primary 工作。一旦节点 Q 希 望切换新的 primary，则只需等前一个 primary 的 lease 过期，则就可以安全的颁发新的 lease 给新的 primary 节点，而不会出现\"双主\"问题",
    "author": "田永威",
    "created": "2025-05-15T14:13:37",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 33,
    "start_xy": [
      70.944,
      342.699
    ],
    "prior_outline": "2.3.4  lease的有效期时间选择",
    "text": "工程中，常选择的 lease 时长是 10 秒级别，这是一个经 过验证的经验值，实践中可以作为参考并综合选择合适的时长",
    "author": "田永威",
    "created": "2025-05-15T14:14:35",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 35,
    "start_xy": [
      70.944,
      322.419
    ],
    "prior_outline": "2.3.5.4  间接使用Lease",
    "text": "直接实现 lease 机制的确会对增加系统设计的复杂度。然而，由于有类似 Zookeeper 这样的开源的高可用系统，在 工程中完全可以间接使用 Lease。借助 zookeeper，我们可以简单的实现高效的、无单点选主、状态 监控、分布式锁、分布式消息队列等功能，而实际上，这些功能的实现都是依赖于背后 zookeeper 与 client 之间的 Lease 的",
    "author": "田永威",
    "created": "2025-05-15T14:20:10",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 36,
    "start_xy": [
      70.944,
      731.189
    ],
    "prior_outline": "2.4  Quorum机制",
    "text": "本节首先讨论一种最简单的副本控制规则 write-all-read-one，在此基础上，放松约束，讨论 quorum 机制",
    "author": "田永威",
    "created": "2025-05-15T14:23:05",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 36,
    "start_xy": [
      91.944,
      731.189
    ],
    "prior_outline": "2.4  Quorum机制",
    "text": "Quorum 机制是一种简单有效的副本管理机制",
    "author": "田永威",
    "created": "2025-05-15T14:21:14",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 36,
    "start_xy": [
      70.944,
      525.479
    ],
    "prior_outline": "2.4.2  Write-all-read-one",
    "text": "Write-all-read-one（简称 WARO）是一种最简单的副本控制规则，顾名思义即在更新时写所有 的副本，只有在所有的副本上更新成功，才认为更新成功，从而保证所有的副本一致，这样在读取 数据时可以读任一副本上的数据",
    "author": "田永威",
    "created": "2025-05-15T14:23:13",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 37,
    "start_xy": [
      70.944,
      682.829
    ],
    "prior_outline": "2.4.3  Quorum定义",
    "text": "在 Quorum 机制下，当某次更新操作 wi 一旦在所有 N 个副本中的 W 个副本上都成功，则就称 该更新操作为\"成功提交的更新操作\"，称对应的数据为\"成功提交的数据\"。",
    "author": "田永威",
    "created": "2025-05-15T14:29:57",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 37,
    "start_xy": [
      70.944,
      662.549
    ],
    "prior_outline": "2.4.3  Quorum定义",
    "text": "令 R>N-W，由于更新 操作 wi 仅在 W 个副本上成功，所以在读取数据时，最多需要读取 R 个副本则一定能读到 wi  更新后 的数据 vi  。如果某次更新 wi 在 W 个副本上成功，由于 W+R>N，任意 R 个副本组成的集合一定与 成功的 W 个副本组成的集合有交集，所以读取 R 个副本一定能读到 wi 更新后的数据 vi",
    "author": "田永威",
    "created": "2025-05-15T14:37:10",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 37,
    "start_xy": [
      91.944,
      371.259
    ],
    "prior_outline": "2.4.3  Quorum定义",
    "text": "在上述定义中，令 W=N，R=1，就得到 WARO，即 WARO 是 Quorum 机制的一种特例",
    "author": "田永威",
    "created": "2025-05-15T14:31:50",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 37,
    "start_xy": [
      70.944,
      343.179
    ],
    "prior_outline": "2.4.3  Quorum定义",
    "text": "与分析 WARO 相似，分析 Quorum 机制的可用性。限制 Quorum 参数为 W+R=N+1。由于更新 操作需要在 W 个副本上都成功，更新操作才能成功，所以一旦 N-W+1 个副本异常，更新操作始终 无法在 W 个副本上成功，更新服务不可用。另一方面，一旦 N-R+1 个副本异常，则无法保证一定 可以读到与 W 个副本有交集的副本集合，则读服务的一致性下降",
    "author": "田永威",
    "created": "2025-05-15T14:45:21",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 37,
    "start_xy": [
      70.944,
      165.309
    ],
    "prior_outline": "2.4.3  Quorum定义",
    "text": "仅仅依赖 quorum 机制是无法保证强一致性的。因为仅有 quorum 机制时无法确 定最新已成功提交的版本号，除非将最新已提交的版本号作为元数据由特定的元数据服务器或元数 据集群管理，否则很难确定最新成功提交的版本号",
    "author": "田永威",
    "created": "2025-05-15T15:07:12",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 38,
    "start_xy": [
      70.944,
      765.409
    ],
    "prior_outline": "2.4.3  Quorum定义",
    "text": "Quorum 机制的三个系统参数 N、W、R 控制了系统的可用性，也是系统对用户的服务承诺：数 据最多有 N 个副本，但数据更新成功 W 个副本即返回用户成功。对于一致性要求较高的 Quorum 系 统，系统还应该承诺任何时候不读取未成功提交的数据，即读取到的数据都是曾经在 W 个副本上成 功的数据",
    "author": "田永威",
    "created": "2025-05-15T14:29:29",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 39,
    "start_xy": [
      70.944,
      607.829
    ],
    "prior_outline": "2.4.4  读取最新成功提交的数据",
    "text": "单纯使用 Quorum 机制时，若要确定最新的成功提交的版本，最多需要读取 R+ （W-R-1）=N 个副本，当出现任一副本异常时，读最新的成功提交的版本这一功能都有可能不可用。 实际工程中，应该尽量通过其他技术手段，回避通过 Quorum 机制读取最新的成功提交的版本。例 如，当 quorum 机制与 primary-secondary 控制协议结合使用时，可以通过读取 primary 的方式读取到 最新的已提交的数据",
    "author": "田永威",
    "created": "2025-05-15T15:28:25",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 39,
    "start_xy": [
      91.944,
      464.399
    ],
    "prior_outline": "2.4.5  基于Quorum机制选择primary",
    "text": "本节介绍一种介于 quorum 机制选择 primary 的技术",
    "author": "田永威",
    "created": "2025-05-15T15:21:00",
    "color": "#f9cd59"
  },
  {
    "type": "Highlight",
    "page": 39,
    "start_xy": [
      70.944,
      444.119
    ],
    "prior_outline": "2.4.5  基于Quorum机制选择primary",
    "text": "现在基本 primary-secondary 协议中引入 quorum 机制， 即 primary 成功更新 W 个副本(含 primary 本身)后向用户返回成功",
    "author": "田永威",
    "created": "2025-05-16T08:52:50",
    "color": "#f9cd59"
  }
]
